version: "3.3"
services:

  proxy:
    ports:
      - "81:80"
      - "8090:8080"
      - "8091:80"
    command:
      # Enable Docker in Traefik, so that it reads labels from Docker services
      - --providers.docker
      # Add a constraint to only use services with the label for this stack
      # from the env var TRAEFIK_TAG
      - --providers.docker.constraints=Label(`traefik.constraint-label-stack`, `${TRAEFIK_TAG?Variable not set}`)
      # Do not expose all Docker services, only the ones explicitly exposed
      - --providers.docker.exposedbydefault=false
      # Disable Docker Swarm mode for local development
      # - --providers.docker.swarmmode
      # Enable the access log, with HTTP requests
      - --accesslog
      # Enable the Traefik log, for configurations and errors
      - --log
      # Enable the Dashboard and API
      - --api
      # Enable the Dashboard and API in insecure mode for local development
      - --api.insecure=true
    environment:
      - NO_PROXY=127.0.0.1,172.16.0.0/12,*.docker.local,localhost,172.17.0.0/12
    labels:
      - traefik.enable=true
      - traefik.http.routers.${STACK_NAME?Variable not set}-traefik-public-http.rule=Host(`${DOMAIN?Variable not set}`)
      - traefik.http.services.${STACK_NAME?Variable not set}-traefik-public.loadbalancer.server.port=80

  db:
    image: postgres:12
    volumes:
      - ../fib-heap/app-db-data:/var/lib/postgresql/data/pgdata
      #- ./docker/pgsql/init.sql:/docker-entrypoint-initdb.d/init.sql
    env_file:
      - .env
    environment:
      - PGDATA=/var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    deploy:
      placement:
        constraints:
          - node.labels.${STACK_NAME?Variable not set}.app-db-data == true
  
  pgadmin:
    ports:
      - "5050:5050"

  queue:
    image: rabbitmq:3-management
    ports:
      - "15672:15672"

  flower:
    image: mher/flower:0.9.7
    ports:
      - "5555:5555"
      
  #code-server:
  #  ports:
  #    - "7071:7071"

  backend:
    ports:
      - "8888:8888"
    volumes:
      - ./backend/app:/app
    environment:
      - JUPYTER=jupyter lab --ip=0.0.0.0 --allow-root --NotebookApp.custom_display_url=http://127.0.0.1:8888
      - SERVER_HOST=http://${DOMAIN?Variable not set}
    build:
      context: ./backend
      dockerfile: backend.dockerfile
      args:
        INSTALL_DEV: ${INSTALL_DEV-true}
        INSTALL_JUPYTER: ${INSTALL_JUPYTER-true}
    # command: bash -c "while true; do sleep 1; done"  # Infinite loop to keep container live doing nothing
    command: /start-reload.sh
    labels:
      - traefik.enable=true
      - traefik.constraint-label-stack=${TRAEFIK_TAG?Variable not set}
      - traefik.http.routers.${STACK_NAME?Variable not set}-backend-http.rule=PathPrefix(`/api`) || PathPrefix(`/docs`) || PathPrefix(`/redoc`)
      - traefik.http.services.${STACK_NAME?Variable not set}-backend.loadbalancer.server.port=80

  celeryworker:
    volumes:
      - ./backend/app:/app
    environment:
      - RUN=celery worker -A app.worker -l info -Q main-queue -c 1
      - JUPYTER=jupyter lab --ip=0.0.0.0 --allow-root --NotebookApp.custom_display_url=http://127.0.0.1:8888
      - SERVER_HOST=http://${DOMAIN?Variable not set}
    command: bash -c " celery worker -A app.worker -l info -Q main-queue -c 1"
    build:
      context: ./backend
      dockerfile: celeryworker.dockerfile
      args:
        INSTALL_DEV: ${INSTALL_DEV-true}
        INSTALL_JUPYTER: ${INSTALL_JUPYTER-true}

  frontend:
    build:
      context: ./frontend-react
      args:
        FRONTEND_ENV: dev
    volumes:
      - ../fib-heap/frontend/npm:/root/.npm #CI Cache
      - ./frontend-react:/app
    command: bash -c "npm ci --cache .npm --prefer-offline; PORT=80 npm start"
    labels:
      - traefik.enable=true
      - traefik.constraint-label-stack=${TRAEFIK_TAG?Variable not set}
      - traefik.http.routers.${STACK_NAME?Variable not set}-frontend-http.rule=PathPrefix(`/`)
      - traefik.http.services.${STACK_NAME?Variable not set}-frontend.loadbalancer.server.port=80

networks:
  traefik-public:
    # For local dev, don't expect an external Traefik network
    external: false
